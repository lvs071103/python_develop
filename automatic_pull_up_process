#!/usr/bin/python
# -*- coding: utf8 -*-
# author: Jack

import os
import sys
import psutil
import subprocess
import time
from subprocess import CalledProcessError
import logging
import paramiko
import json


def daemon():
    try:
        pid = os.fork()
        if pid > 0:
            # exit first parent
            sys.exit(0)
    except OSError as err:
        sys.stderr.write('_Fork #1 failed: {0}\n'.format(err))
        sys.exit(1)
    # decouple from parent environment
    os.chdir('/')
    os.setsid()
    os.umask(0)
    # do second fork
    try:
        pid = os.fork()
        if pid > 0:
            # exit from second parent
            sys.exit(0)
    except OSError as err:
        sys.stderr.write('_Fork #2 failed: {0}\n'.format(err))
        sys.exit(1)
    # redirect standard file descriptors
    sys.stdout.flush()
    sys.stderr.flush()
    si = open(os.devnull, 'r')
    so = open(os.devnull, 'w')
    se = open(os.devnull, 'w')
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())


def get_pid(name):
    p_list = []
    try:
        command = "pgrep %s" % name
        stdout = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True).communicate()[0]
        for line in stdout.split('\n'):
            if line:
                p_list.append(line)
    except CalledProcessError:
        p_list = []

    return p_list


def verification(p_list):
    result = {}
    for pid in p_list:
        result['%s' % pid] = psutil.Process(int(pid)).status()
    return result


def local_process_reset():
    command = "/data/Server/Release/Bin/run.sh s && /data/Server/Release/Bin/run.sh r"
    try:
        subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)
        return True
    except CalledProcessError:
        return False


def remote_process_reset():
    hostname = '192.168.1.100'
    try:
        connection = paramiko.SSHClient()
        connection.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        connection.connect(hostname=hostname,
                           username='root',
                           password='',
                           port=22,
                           timeout=30)
        command = "/data/Server/Release/Bin/run.sh s && /data/Server/Release/Bin/run.sh r"
        execution = connection.get_transport().open_session()
        execution.exec_command(command)
        if execution.recv_exit_status() == 0:
            logging_out(json.dumps(u'执行成功', encoding='UTF-8', ensure_ascii=False))
            return True
        connection.close()
    except (paramiko.BadHostKeyException, paramiko.AuthenticationException, paramiko.SSHException) as e:
        print e
        logging_out(json.dumps(u"%s SSH连接失败" % hostname, encoding='UTF-8', ensure_ascii=False))
        sys.exit(1)


def logging_out(message):
    logging.basicConfig(level=logging.INFO, filename="/tmp/Automatic_pull_up.log", filemode="a+",
                        format="%(asctime)-15s %(levelname)-8s %(message)s")
    logging.info(message)


def run():
    while True:
        time.sleep(300)
        process = {}
        process_name = ['GatewayServe', 'PayServer', 'LoginServer']
        for p in process_name:
            pid_list = get_pid(p)
            if not pid_list:
                logging_out(json.dumps(u'%s进程不存在，可能宕机了 30秒后将重启服务进程' % p,
                                       encoding='UTF-8', ensure_ascii=False))
                time.sleep(30)
                # reset process
                if 'GatewayServe' in process_name:
                    if local_process_reset():
                        logging_out(json.dumps(u'本地重启成功', ensure_ascii=False, encoding='UTF-8'))
                    else:
                        logging_out(json.dumps(u'本地重启失败', ensure_ascii=False, encoding='UTF-8'))
                    if remote_process_reset():
                        logging_out(json.dumps(u'远程重启成功', ensure_ascii=False, encoding='UTF-8'))
                    else:
                        logging_out(json.dumps(u'远程重启失败', ensure_ascii=False, encoding='UTF-8'))
                else:
                    if remote_process_reset():
                        logging_out(json.dumps(u'远程重启成功', ensure_ascii=False, encoding='UTF-8'))
                    else:
                        logging_out(json.dumps(u'远程重启失败', ensure_ascii=False, encoding='UTF-8'))
                    if local_process_reset():
                        logging_out(json.dumps(u'本地重启成功', ensure_ascii=False, encoding='UTF-8'))
                    else:
                        logging_out(json.dumps(u'本地重启失败', ensure_ascii=False, encoding='UTF-8'))
            else:
                process['name'] = p
                process['status'] = verification(pid_list)
                logging_out(process)

if __name__ == '__main__':
    daemon()
    run()
